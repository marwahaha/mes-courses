* [DEVENV] write custom dish management commands
** TODO create a module to include from the console
** TODO create a script to start the console with this module loaded on an heroku instance
** TODO add custom methods to this module
*** TODO have something to dump the results in tables in the console
*** TODO list all used items
*** TODO list used and unavailable items
*** TODO search all items with some piece of name
*** TODO search all used items with some piece of name
*** TODO replace an item by another everywhere it is used
*** TODO renomer un plat
* [DEVENV] speed up integration
** DONE diminish the stores items api tests @range
** DONE do less login-logout during cart testing
*** refactor the availble and 2 items prices tests (they are already tested in the before :all clause
** DONE start deploying to heroku in // with integration tests : 4" gain
| process 1       | process 2          | process 3       |
| deploy to integ | deploy to watchdog | migrate         |
| restore prod db | migrate            | specs           |
| migrate         | ping               | features        |
| rollback        |                    | feature dry-run |
| migrate         |                    | csslint         |
| ping            |                    |                 |
| trigger import  |                    |                 |
| OK              | OK                 | OK              |
*** DONE modify the parallel_exec to start_parallel_exec & end_parallel_exec
**** TODO see if there is something like futures in ruby
*** DONE start the deployments at the begining of the script
** TODO allow to run ci while running test in dev
*** TODO setup vms or containers
*** TODO check vagrant and vagrant-lxc
** TODO write the time taken by each thread
** TODO isolate auchan direct api into its gem : 4"30' to gain
*** would the integ script be independent from this gem ? -> YES ! it would be faster
*** special repo
*** special deployment, must be compatible with heroku
**** geminabox
***** démarrer un serveur de gem local sur le poste de dev
***** avoir une addresse ip fixe
***** avoir un serveur en ligne en permanence
**** gemfurry 9 to 14 $/month
**** le publier dans un repo privé de github
**** le mettre directement dans le repo
***** il faudrait que le bundle install recopie la gem dans bundle/cache
***** on pourrait faire un sur-script autour de bundle update (script/update)
*** special ci
**** pourrait-on lancer le watchdog directement sur le repo dans heorku ?
*** TODO spikes
**** TODO is there a way to keep the revision history ?
**** TODO can we deploy a gem to heroku and just use scheduled rake tasks
*** TODO create an empty repo "mes-courses-stores"
*** TODO initialize an empty gem with Hoe
*** TODO copy the code to it
*** TODO make sure the specs pass
*** TODO create a rake task or a script to deploy to the watchdog
*** TODO create a version for the gem
*** TODO deploy it on my machine
*** TODO create a bundle_update script that wraps bundle update and
**** TODO it should start the local machine's gem server
**** TODO it should copy the latest store api gem version to vendor/cache
**** TODO add this new gem to the gemfile with :path => "vendor/cache ..."
** TODO fail the build if it takes more than 5/10 minutes ?
** TODO run tests in parrallel
*** DONE try the ruby "pty" library
**** DONE deploy to both heroku apps in // -> 5m gain !
***** DONE make pty work
***** DONE return sub process error status
***** DONE run pty in different threads
***** DONE dump the outputs
*** TODO try running the (fast?) specs in // with parallel_test gem : 2" to gain
**** TODO setup parallel dbs
***** les bases ne sont pas construites pour autre chose que RAILS_ENV=test ...
***** TODO change my computer
***** TODO avoir une vm pour l'environement d'integ, et merger tous les envs (test, cucumber et ci)
****** DONE merge cucumber and test
****** TODO regarder les container linux !
**** TODO use an unique real_dummy_store dir per feature
**** TODO add something to the env setup script to make sure all dbs are created
**** TODO add something to the ci script to prepare the parallel dbs
*** use an integration server
*** migrate to github if it handles continuous integration
* [HEROKU] use vagrant or chef to completly setup virtual dev envs
** try lxc containers instead of vms
** wait until I have a good laptop
** use it to track heroku stack changes
* [HEROKU] replace exception_notifier by papertrail alerts
* [DESIGN] Improve css style testing
** try to test design and style through cucumber
** try cactus css automated testing
** Read a book about good css design
** Fix csslint issues
*** TODO utiliser un h3 pour les titres dans la sidebar
*** TODO mettre la sidebar en 1° et utilisé un float right dessus
* [DESIGN] use rspec-fire to match mocks and classes
* [DEVENV] écrire un guide de debugging complet
** debugger rails (dans emacs)
** débugger rspec (dans emacs)
** débugger cucumber (dans emacs)
** si besoin écrire du emacs script
** voir comment faire un break on exception
** try pry
* [DEVENV] réduire la maintenance due aux updates de stack et OS
** le faire le plus souvent possible
** OS
*** le meme que dans la stack heroku ? (LTS, vieille)
*** la LTS ubuntu ?
*** la dernière ubuntu ?
** essayer de migrer dès que possible, et utiliser les tests pour vérifier si c'est bon
** faire une branche pour la migration
** travailler dans une VM pour éviter de peter l'environement courant
*** se débrancher de dropbox (trop compliqué dans chef)
**** google docs
**** github
**** un hosteur d'images (y'avait une startup qui permettait les redimentionnements)
*** avoir un pc qui fonctionne bien avec des VMs
**** rapide
**** gros SSD
**** grande résolution
**** léger
*** ou bien changer le ssd pour avoir plusieurs installations d'ubuntu, mais sans vm
** utiliser Chef, Puppet ou autre pour setuper les VMs de devs
** avoir le script pour setuper la vms dans le code
* [DESIGN] replace the place matches by an extension to capybara/webrat #within that associates a name to a selector
* [DEVENV] voir comment installer les rdoc avec les gem via bundle
** bundle exec gem rdoc --all
* [DEVENV] améliorer la recherche dans les ebooks
** trouver un bon indexeur de fichier pour ubuntu
** setuper calibre
* [DEVENV] improve devenv ergonomy
** change emacs color theme and font size (ubuntu mono),
** package emacs-goodies-el (http://techlogbook.wordpress.com/2008/04/03/changing-emacs-color-theme/)
** change default size of terminal text
** see if it is possible to start emacs and terminal with predefined window size
** fixer "pas de serveur" edit-in-emacs, faire un launcher plus rapide dans unity
** ajouter un header par defaut aux fichiers créés avec emacs (encoding)
** essayer d'améliorer emacs pour ruby
        http://nsaunders.wordpress.com/2009/11/18/turn-emacs-into-an-ide/
        http://stackoverflow.com/questions/7989090/emacs-ruby-autocomplete-almost-working
        http://stackoverflow.com/questions/4277788/ruby-navigation-in-emacs
        http://ozmm.org/posts/textmate_minor_mode.html
        http://ecb.sourceforge.net/
        https://github.com/remvee/emacs-rails
        http://www.emacswiki.org/RspecMode + http://stackoverflow.com/questions/10288785/rspec-request-specs-failing-when-run-from-emacs-using-rspec-mode
** commande emacs pour fermer tous les buffers dans un sous repertoire
** emacs ctags https://github.com/tpope/gem-ctags
** use emacs packaging system
* [DESIGN] remove if on_heroku? from application.rb by providing special envs or the like
** TODO fix the cucumber env warning message
** DONE make sqlite in memory db an env var option instead of a test env enforcement http://pivotallabs.com/parallelize-your-rspec-suite/
** prod : heroku
** integ : ci
** dev : local
** watchdog ???
** use different virtual machines and the same env to simplify set up
* [DEVENV] import db from beta to integ to test migrations with real data
* [HEROKU] utiliser la variable d'environnement URL de heroku pour avoir l'url de l'application
* [HEROKU] configurer la variable d'environnement LANG de heroku pour afficher les choses dans la bonne langue
* [DEVENV] initialize a real dummy store from fixture files
* [DEVENV] create a rake task to use fixtures to create a real dummy store and then to create dishes with the imported items
* [DEVENV] Custom shell that preloads store generators
* [DESIGN] spliter du code dans des gems
** ContainA matcher et PagePart
** store apis
** store generator
** association factories pour FactoryGirl
** remplacer rails autoload par autoload
** Heroku logs
*** HerokuReportErrorMailer
** Scheduled tasks
*** HerokuWeeklyScheduledTask
*** il faut prendre le mail d'erreur avec
* [DESIGN] put controllers and models in MesCourses namespace module
** prefix table names
** try to keep the same routes
* [DESIGN] Introduce view presenters (see draper gem)
** commencer avec la vue des item_categories (on pourrait implémenter 2 présenteurs != à la place de faire tous ces assign)
* [DEVENV] Mettre en place des rcov, heckle et autres dans le script d'intégration continue
* [DEVENV] completely disable stock test::unit stack from rails
* [DESIGN] clean up and homogenize usage FactoryGirl and stub_model
** use the standard FactoryGirl synthax
** understand how to use FactoryGirl and stub_model together
** try to use real model instances with stub_model ?
** use mock_model and mock_model.as_new_record instead of raw mocks
** decide wether and when to use mock_model and mock or stub_models and FactoryGirl
** avoid mixing real records and stubs
* [DEVENV] merger script/setup et script/setup-ci tant qu'il n'y a qu'un seul pc de dev sur le projet
* [DESIGN] faire un matcher pour les path bar
** les should have_selector(...), failure message imbriqués permettent de faire exactement ce qu'on veut, il nous faudrait juste les packagés comme des un matcher, si c'est simple, on devrait pouvoir simplifier des matchers existants aussi
** peut être deux : un path_bar_element(index, text, url)
** un autre pour path_bar avec une liste d'elements
* [DESIGN] faire un matcher pour les link_to avec du text et une url, faire le tour et l'utiliser partout (checker pour button_to au passage)
* [DEVENV] fix recuring ubuntu crashes
** try Xubuntu
** try gnome session
** try XFCE session
** try unity 2D
* [DEVENV] regarder orgmod vs github tasks vs google doc, kanban avec orgmode
* [HEROKU] replicate db from beta to others (heroku and development) to find data errors (while migrating or importing)
* [DESIGN] enlever l'affreux monkey patch de httputils escape(uri) dans real_dummy_store_items_api.rb
* [DESIGN] Would it be possible to classify features with tags instead of directories, ex user & dishes for dish modifications
** passer sur github
* [DEVENV] Put everything in the repo : thirdparties source code, dev tools, follow up, marketing … maybe I'll need to have a main git repo with submodules
** faire du ménage dans les trucs qui ne sert en fait à rien
** voir si il n'y a pas des mode emacs pour remplacer certains tableurs par des modes emacs
* [DEVENV] Install windows and all browsers with VirtuaBox
* [DEVENV] Make a web site where one can check logs of heroku apps
* [DEVENV] build something to scrap analytics to an email :
** revenue
** expenditures
** conversion rates
* [DESIGN] reduce test maintenance
** add an essentiel cucumber tag in include these scenarios in autotest suite
** remove "plumbing" unit tests by essential cucumber scenarios
** refactor the code to more clear responsibilities
* [DESIGN] Spike how to control accessibility in models
* [DESIGN] Spike rspec-spies + .ordered, try to add it (wait for rspec 2)
* [DESIGN] Spiker ce qu'apporte NoSql pour les problèmes de Foreign Keys
* [DEVENV] Spike launching ci on heroku (might be a problem with db drop ...)
* [DESIGN] Spike how to test ssl requirements in cucumber and/or local dev : already 3 bugs because of this ! (sign in, cart forward, empty cart)
** TODO regarder comment tester localement
*** TODO créer un certificat ssl local : https://gist.github.com/trcarden/3295935
*** TODO installer foreman
*** TODO settuper SslEnforcer sur un port https custom : https://github.com/tobmatth/rack-ssl-enforcer
*** TODO démarrer 2 process sur 2 ports différents dans foreman : http://www.railway.at/2013/02/12/using-ssl-in-your-local-rails-environment/
** TODO regarder comment tester automatiquement
*** TODO démarrer tout les 2 applies
*** TODO faire des gets
*** TODO vérifier les urls
* [DESIGN] Spiker des tests cucumber avec javascript (avec l'order view et l'iframe.onload par exemple)
* [DEVENV] spike vim :
** try vim + all plugins, it seems to be the standard
